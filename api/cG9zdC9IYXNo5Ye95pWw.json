{"title":"Hash函数","date":"2020-05-03T09:30:00.000Z","author":"Vale Sail","slug":"Hash函数","tags":["数据结构和算法"],"updated":"2021-03-04T13:48:16.047Z","content":"<h4 id=\"Hash算法\">Hash算法<a href=\"post/Hash函数#Hash算法\"></a></h4><ol>\n<li><p>应用唯一标示</p>\n<blockquote>\n<p>hash算法是对数据做信息摘要，可以通过hash结果标示一个很大的数据:文件hash</p>\n</blockquote>\n</li>\n<li><p>数据完整性和正确性</p>\n<blockquote>\n<p>下载网站提供下载地址和文件md5 校验，用于检测文件的完整性和正确性</p>\n</blockquote>\n</li>\n<li><p>应用安全加密</p>\n<blockquote>\n<p>用户防止数据原始数据泄露(密码)，对原始数据进行加密存储，但是hash算法可能出现hash冲突，单向加密，不同的hash算法破解难度和计算时间不一样，需要权衡处理；hash冲突:加盐</p>\n</blockquote>\n</li>\n<li><p>散列函数</p>\n<blockquote>\n<p>用于hash表的设计，不要求是否容易反向解密，但是要求是否能够均匀分布区，hash函数的计算快慢，hash冲突解决:开发寻址和链表法</p>\n</blockquote>\n</li>\n<li><p>hash破解</p>\n<blockquote>\n<p>由于hash的单向加密，无法进行逆向破解，但是可以使用常用的数据组成字典破解。</p>\n</blockquote>\n</li>\n<li><p>负载均衡</p>\n<blockquote>\n<p>保证用户session的粘合性(同一个用户，在同一个session 一直在同一台机器)，对用户的IP或者会话ID进行hash计算，指定到特定的服务器</p>\n</blockquote>\n</li>\n<li><p>数据分片</p>\n<blockquote>\n<p>通过hash算法对数据进行分片，处理海量数据提升单机资源的限制</p>\n</blockquote>\n</li>\n<li><p>分布式存储</p>\n<blockquote>\n<p>海量数据的存储(Redis缓存 单key 太多 分散存储)；机器上下线可能会导致已存储的数据失效，一致性hash:环装结构+虚拟节点</p>\n</blockquote>\n</li>\n</ol>\n","prev":{"title":"二叉树","slug":"树"},"next":{"title":"排序优化和查找","slug":"排序优化"},"link":"https://vale-sail.github.io/post/Hash函数/"}