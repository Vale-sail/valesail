{"title":"线性时间复杂度的排序","date":"2020-04-28T21:16:46.000Z","author":"Vale Sail","slug":"线性时间复杂度的排序","updated":"2021-03-04T13:48:16.047Z","content":"<h5 id=\"1-桶排序\">1.桶排序<a href=\"post/线性时间复杂度的排序#1-桶排序\"></a></h5><blockquote>\n<p>把数据分到有序的桶里面 然后在桶里面使用快排进行排序</p>\n</blockquote>\n<h6 id=\"1-与快排比较\">1.与快排比较<a href=\"post/线性时间复杂度的排序#1-与快排比较\"></a></h6><p>由于是把数据拆分到多个桶然后使用快拍，如果数据分布比较均匀的情况，复杂度o(n) ，如果数据被分配到一个桶中。则复杂度与快拍一直</p>\n<h6 id=\"2-优劣分析\">2.优劣分析<a href=\"post/线性时间复杂度的排序#2-优劣分析\"></a></h6><p>如果在桶分布比较均匀的情况下，效率高。比较适用于外部排序：数据存储在磁盘上，内存不足时，全量扫描一次划分桶，拆分成小文件，然后基于桶(小文件)一次读取一个桶的数据进行排序。</p>\n<h5 id=\"2-计数排序\">2.计数排序<a href=\"post/线性时间复杂度的排序#2-计数排序\"></a></h5><blockquote>\n<p>特殊的桶排序，每个桶元素相同，桶中还会存储同种元素个数，这样桶内不需要排序，可以快速定位元素的在数组中的顺序</p>\n</blockquote>\n<h6 id=\"1-优劣分析\">1.优劣分析<a href=\"post/线性时间复杂度的排序#1-优劣分析\"></a></h6><ol>\n<li>数据范围不大值采用，可以快速确定顺序</li>\n<li>数据范围较大是，需要对于元素做指定的变化然后存放。内存效率不高</li>\n</ol>\n","prev":{"title":"排序优化和查找","slug":"排序优化"},"next":{"title":"排序","slug":"排序"},"link":"https://vale-sail.github.io/post/线性时间复杂度的排序/"}