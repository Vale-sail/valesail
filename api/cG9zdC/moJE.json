{"title":"二叉树","date":"2020-05-03T10:17:00.000Z","author":"Vale Sail","slug":"树","tags":["数据结构与算法"],"updated":"2021-03-04T13:48:16.047Z","content":"<h5 id=\"对比hash表\">对比hash表<a href=\"post/树#对比hash表\"></a></h5><ol>\n<li>散列表中虽然增删改查的时间复杂度是常量级的但是数据是无序存储的，如果要输出有序的数据，需要先进行排序。而对于二叉查找树来说，我们只需要中序遍历，就可以在 O(n) 的时间复杂度内，输出有序的数据序列。</li>\n<li>散列表扩容耗时很多，而且当遇到散列冲突时，性能不稳定，尽管二叉查找树的性能不稳定，但是在工程中，我们最常用的平衡二叉查找树的性能非常稳定，时间复杂度稳定在 O(logn)。</li>\n<li>笼统地来说，尽管散列表的查找等操作的时间复杂度是常量级的，但因为哈希冲突的存在，这个常量不一定比 logn 小，所以实际的查找速度可能不一定比 O(logn) 快。加上哈希函数的耗时，也不一定就比平衡二叉查找树的效率高。</li>\n<li>散列表的构造比二叉查找树要复杂，需要考虑的东西很多。比如散列函数的设计、冲突解决办法、扩容、缩容等。平衡二叉查找树只需要考虑平衡性这一个问题，而且这个问题的解决方案比较成熟、固定。</li>\n</ol>\n<h4 id=\"二叉查找树\">二叉查找树<a href=\"post/树#二叉查找树\"></a></h4><ol>\n<li>节点值大于左子节点 小于右子节点</li>\n<li>查找，新增，删除和树的高度有关。最坏情况下退化为单链表</li>\n</ol>\n","prev":{"title":"腾讯CDC面试","slug":"腾讯CDC面试"},"next":{"title":"Hash函数","slug":"Hash函数"},"link":"https://vale-sail.github.io/post/树/"}