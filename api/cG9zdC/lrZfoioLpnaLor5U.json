{"title":"字节面试-PHP","date":"2021-03-04T21:04:08.000Z","author":"Vale Sail","slug":"字节面试","updated":"2021-03-04T13:48:16.047Z","content":"<h4 id=\"PHP\">PHP<a href=\"post/字节面试#PHP\"></a></h4><h6 id=\"PHP7\">PHP7<a href=\"post/字节面试#PHP7\"></a></h6><ol>\n<li>性能改进</li>\n<li>新增?? 运算符<blockquote>\n<p>$site = isset($_GET[‘site’]) ? $_GET[‘site’] : ‘菜鸟教程’;<br>$site = $_GET[‘site’] ?? ‘菜鸟教程’;</p>\n</blockquote>\n</li>\n<li>新增Throwable类，是Error和Exception的父类，使用try{}catch{}捕获。未捕获使用Error原来的处理方式，也可以是set_exception_handler处理</li>\n<li>新增类型申明</li>\n<li>新增intdiv</li>\n</ol>\n<h6 id=\"PHP弱类型的实现原理\">PHP弱类型的实现原理<a href=\"post/字节面试#PHP弱类型的实现原理\"></a></h6><ol>\n<li>数据结构底层采用zval实现，zval结构体中包含refcount(引用记数)，is_ref(是否是引用),type(类型)，value(联合体)；使用type标明类型，来决定value如何存储。php中的字符串没有使用C语言中以’\\0’结束的方式，采用字段len来存储长度，在读取时遇到’\\0’时不会结束，所以是二进制安全的。</li>\n</ol>\n<h6 id=\"内存回收机制\">内存回收机制<a href=\"post/字节面试#内存回收机制\"></a></h6><ol>\n<li>采用引用计数，计数为0的时候清理</li>\n</ol>\n<h6 id=\"循环引用的处理\">循环引用的处理<a href=\"post/字节面试#循环引用的处理\"></a></h6><ol>\n<li>当一个变量的refcount减少之后不为0时，将其放入循环链表结构的头部缓冲区。</li>\n<li>缓存区满的时候，由于变量存在成员元素，采用深度优先的方式进行遍历，将所有的元素标记为灰色，并将refcount减一灰色可以有效地防止变量被重复添加。</li>\n<li>重复遍历链表，将refcount为0的元素标记为白色，refcount不为0的标记为黑色，并将refcount加一</li>\n<li>重复遍历链表，将标记为白色的元素删除</li>\n</ol>\n","next":{"title":"golang流水线","slug":"golang流水线"},"link":"https://vale-sail.github.io/post/字节面试/"}