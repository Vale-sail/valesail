{"title":"数组","date":"2020-04-15T22:02:00.000Z","author":"Vale Sail","slug":"数组","tags":["数据结构与算法"],"categories":["学习笔记"],"updated":"2021-03-04T13:48:16.047Z","content":"<h4 id=\"数组\">数组<a href=\"post/数组#数组\"></a></h4><p>数组是一种线性表数据结构，使用一组连续空间存储相同类型的值</p>\n<p>线性表: 数组 链表 队列 栈</p>\n<p>非线性表: 树 图</p>\n<p>特点</p>\n<ol>\n<li>随机访问 复杂度o(1)<blockquote>\n<p>由于数组存储是在连续空间存储相同类型的值 可以根据数组下标和数组的首地址 确定数组的内存地址<br>比如int型数组a, a[i]的内存地址=a[0]内存地址+i*4</p>\n</blockquote>\n</li>\n<li>插入 复杂度o(n)<blockquote>\n<p>最好时间复杂度 数组尾部插入  直接插入<br>最坏时间复杂度 数组头部插入  将原来数组的元素依次后移 然后在头部插入 </p>\n</blockquote>\n</li>\n<li>数组 删除o(n)<blockquote>\n<p>最好时间复杂度 数组尾部删除 直接删除<br>最坏时间复杂度 数组头部删除 删除值，然后将元素依次迁移<br>优化 可以采用先标记 后删除 移动数组元素，在多次标记删除只有 统一进行真正的删除，移动元素 这样多次删除均摊了 数组元素移动的时间复杂度  o(n)</p>\n</blockquote>\n</li>\n</ol>\n<h5 id=\"数组越界\">数组越界<a href=\"post/数组#数组越界\"></a></h5><p>不同语言对于数组越界有不同的处理</p>\n<h5 id=\"数组和容器\">数组和容器<a href=\"post/数组#数组和容器\"></a></h5><p>java中ArrayList 封装了数组的常用操作，并且支持动态扩容，但是不支持基础数据类型且性能会有损失<br>业务中使用ArrayList 可以快速开发</p>\n","prev":{"title":"面向对象","slug":"面向对象"},"next":{"title":"OD岗位机试","slug":"华为OD岗位机试"},"link":"https://vale-sail.github.io/post/数组/"}