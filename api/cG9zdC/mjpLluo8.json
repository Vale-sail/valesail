{"title":"排序","date":"2020-04-22T23:58:00.000Z","author":"Vale Sail","slug":"排序","tags":["数据结构与算法"],"categories":["学习笔记"],"updated":"2021-03-04T13:48:16.047Z","content":"<p>排序算法</p>\n<h4 id=\"小数据量\">小数据量<a href=\"post/排序#小数据量\"></a></h4><h5 id=\"1-冒泡\">1. 冒泡<a href=\"post/排序#1-冒泡\"></a></h5><blockquote>\n<p>相邻的两个元素交换<br>O(n) O(n2) </p>\n</blockquote>\n<h5 id=\"2-插入\">2. 插入<a href=\"post/排序#2-插入\"></a></h5><blockquote>\n<p>分为有序区和无序区 将无序区的插入到有序区<br> O(n) O(n2)</p>\n</blockquote>\n<h5 id=\"3-选择\">3. 选择<a href=\"post/排序#3-选择\"></a></h5><blockquote>\n<p>分为有序区和无序区 每次选择最大或者最小插入有序区<br>O(n2) O(n2)</p>\n</blockquote>\n<h4 id=\"大数据量\">大数据量<a href=\"post/排序#大数据量\"></a></h4><h3 id=\"4-希尔排序\">4. 希尔排序<a href=\"post/排序#4-希尔排序\"></a></h3><blockquote>\n<p>优化版的插入排序</p>\n</blockquote>\n<h3 id=\"5-归并\">5. 归并<a href=\"post/排序#5-归并\"></a></h3><blockquote>\n<p>把元素分为两个部分，然后进行合并 自下而上<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">哨兵版本归并排序 优化while 语句</span><br><span class=\"line\">function mergeSort($a)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (count($a) == 1) &#123;</span><br><span class=\"line\">        return $a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $p = ceil(count($a) / 2);</span><br><span class=\"line\">    $tmp = array_chunk($a, $p);</span><br><span class=\"line\">    $ret = merge(mergeSort($tmp[0]), mergeSort($tmp[1]));</span><br><span class=\"line\">    return $ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function merge($a, $b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    $ret = [];</span><br><span class=\"line\">    $i = $j = 0;</span><br><span class=\"line\">    $a[] = PHP_INT_MAX;</span><br><span class=\"line\">    $b[] = PHP_INT_MAX;</span><br><span class=\"line\">    while ($a[$i] != PHP_INT_MAX || $b[$j] != PHP_INT_MAX) &#123;</span><br><span class=\"line\">        if ($a[$i] &lt; $b[$j]) &#123;</span><br><span class=\"line\">            $ret[] = $a[$i];</span><br><span class=\"line\">            $i++;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            $ret[] = $b[$j];</span><br><span class=\"line\">            $j++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return $ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"6-快速排序\">6. 快速排序<a href=\"post/排序#6-快速排序\"></a></h3><blockquote>\n<p>把元素以中间元素分为两部分 一部分大于中间元素 一部分小于中间元素 自上而下</p>\n</blockquote>\n<p>稳定: 等值元素的位置在排序过程中是否发生变化<br>分冶思维<br>分区查找 求解 topN</p>\n","prev":{"title":"线性时间复杂度的排序","slug":"线性时间复杂度的排序"},"next":{"title":"递归和队列","slug":"递归和队列"},"link":"https://vale-sail.github.io/post/排序/"}