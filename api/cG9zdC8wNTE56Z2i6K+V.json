{"title":"0519面试上","date":"2020-05-19T22:13:00.000Z","author":"Vale Sail","slug":"0519面试","tags":["计算机网络"],"categories":["面试总结"],"updated":"2021-03-04T13:48:16.047Z","content":"<p>今天又收到了一个面试，还是腾讯的。大公司，心的敬意油然而生，自己对自己的项目经验各种查漏补缺，但是防不胜防，最终面试被花式摩擦。</p>\n<ol>\n<li>OSI七层网络模型<ol>\n<li>应用层: 网络服务面向用户的接口；主要包含协议(HTTP FTP TFTP SMTP SNMP DNS TELNET HTTPS POP3 DHCP)</li>\n<li>表示层: 数据的标示，安全，压缩；主要包括</li>\n<li>会话层: 建立，管理，终止会话</li>\n<li>传输层: 传输数据的协议端口号，流控和差错校验；TCP和UDP<ol>\n<li>UDP 无连接，尽最大努力交付，面向报文，没有拥塞控制，广播，头部开销小</li>\n<li>TCP 点对点面向连接的可靠性交付，全双工，流式传输；<br> 可靠性: 1. 停止等待协议 2. 超时重传 3. 自动重传 4. 滑动窗口(流量控制)<br> 拥塞控制: 慢开始和拥塞避免:主键增大发送窗口；快重传和快恢复</li>\n</ol>\n</li>\n<li>网络层:进行逻辑地址寻址，实现不同网络之间的路径选择。ICMP IGMP IP（IPV4 IPV6）</li>\n<li>数据链路层:将数据分装成帧，透明传输，差错检测；点对点(PPP)和广播协议</li>\n<li>物理层: 建立、维护、断开物理连接。</li>\n</ol>\n</li>\n<li>三次握手<br> d8f9d72a6059252d20d93b0a6645fb3e59b5b9d2.jpeg<br><img src=\"/images/TCP三次握手.png\" alt=\"upload successful\"><br> 对于第三次握手的个人理解:确认发送方接收方的发送和接受消息的能力 在不稳定的网络环境中，确定客户端能收到了服务端的消息，客户端回消息给服务端确认整个连接的建立，有效防止因为网络阻塞不稳定导致服务端建立无效的连接。<br> 48540923dd54564e5260495ce0006487d0584fb6.jpeg<br><img src=\"/images/四次挥手.png\" alt=\"upload successful\"><br> 等待两个报文的通信时间，进行重发，确认发送和接收双方，都已经没有数据需要进行发送。<br> TCP连接建立<br> 20181225104300849.png<br><img src=\"/images/TCP连接建立.png\" alt=\"upload successful\"><br> TCP的状态<pre><code>1. LISTENING 监听状态\n1. SYN_SENT (客户端状态) :请求连接\n1. SYN_RECEIVED (服务端状态): 等待确认连接\n1. ESTABLISHED 连接建立，数据传输\n1. FIN-WAIT-1 主动发起关闭等待远程状态\n1. FIN-WAIT-2 收到远程关闭确认状态，关闭数据发送\n1. CLOSE-WAIT 等待本地关闭连接\n1. LAST-ACK 等待远程发送恢复确认关闭\n1. TIME-WAIT 发送最后一个关闭确认，等待状态\n1. CLOSED 连接关闭\n326461-20190402143138315-1627065051.png\n</code></pre><img src=\"/images/TCP状态改变.png\" alt=\"upload successful\"><br>TCP网络优化: TIME-WAIT 的快速回收和复用</li>\n<li>http协议 H1 H2 H3<ol>\n<li>h1 默认长连接，有效减少多次连接的3次握手。(域名发散 提升浏览器对于域名请求的链接限制)</li>\n<li>HTTP 1.1支持只发送header信息(不带任何body信息)，如果服务器认为客户端有权限请求服务器，则返回100，否则返回401。客户端如果接受到100，才开始把请求body发送到服务器。这样当服务器返回401的时候，客户端就可以不用发送请求body了，节约了带宽。另外HTTP还支持传送内容的一部分。这样当客户端已经有一部分的资源后，只需要跟服务器请求另外的部分资源即可。（断点续传）</li>\n<li>h2支持多路复用 (域名收敛)，支付双向通信，支持头部压缩</li>\n<li>HTTP3.0(QUIC) 基于UDP，用ID解决UDP无连接的状态(适用于网络切换无序重新链接)，重传机制，链接复用，拥塞控制；</li>\n</ol>\n</li>\n<li><p>select epoll</p>\n<ol>\n<li><p>select 时间复杂度O(n)</p>\n<blockquote>\n<p>基于数组，单进程有最大限制，I/O事件触发轮询所有流，找出能读出数据，或者写入数据的流，对他们进行操作。需要维护FD，并且需要在用户态和内核态相互拷贝</p>\n</blockquote>\n</li>\n<li><p>poll时间复杂度O(n)</p>\n<blockquote>\n<p>基于链表，没有最大限制。和select 一样轮询；poll本质上和select没有区别；需要在用户态和内核态相互拷贝</p>\n</blockquote>\n</li>\n<li>epoll 时间复杂度O(1)<blockquote>\n<p>基于事件和callback的方式，没有最大连接限制；</p>\n</blockquote>\n</li>\n</ol>\n</li>\n</ol>\n<p>进程部分明天继续补充，今日脑容量已耗尽</p>\n","prev":{"title":"0522坑","slug":"0522坑"},"next":{"title":"0518算法","slug":"0518"},"link":"https://vale-sail.github.io/post/0519面试/"}